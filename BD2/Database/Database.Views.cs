//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Database.DatabaseContainer),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsb7da9112adcbdff5c8c73e9873e07f00db1a899b1eece42f3367e8b0a0d7e68b))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsb7da9112adcbdff5c8c73e9873e07f00db1a899b1eece42f3367e8b0a0d7e68b : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "b7da9112adcbdff5c8c73e9873e07f00db1a899b1eece42f3367e8b0a0d7e68b"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "DatabaseStoreContainer.Persons")
            {
                return GetView0();
            }

            if (extentName == "DatabaseStoreContainer.Users")
            {
                return GetView1();
            }

            if (extentName == "DatabaseStoreContainer.Candidates")
            {
                return GetView2();
            }

            if (extentName == "DatabaseStoreContainer.Documents")
            {
                return GetView3();
            }

            if (extentName == "DatabaseStoreContainer.Skills")
            {
                return GetView4();
            }

            if (extentName == "DatabaseStoreContainer.Evaluations")
            {
                return GetView5();
            }

            if (extentName == "DatabaseStoreContainer.Decisions")
            {
                return GetView6();
            }

            if (extentName == "DatabaseStoreContainer.RecruitmentStages")
            {
                return GetView7();
            }

            if (extentName == "DatabaseStoreContainer.SoftSkills")
            {
                return GetView8();
            }

            if (extentName == "DatabaseStoreContainer.SoftSkillsEvaluations")
            {
                return GetView9();
            }

            if (extentName == "DatabaseStoreContainer.SkillsEvaluations")
            {
                return GetView10();
            }

            if (extentName == "DatabaseStoreContainer.Stage")
            {
                return GetView11();
            }

            if (extentName == "DatabaseContainer.Persons")
            {
                return GetView12();
            }

            if (extentName == "DatabaseContainer.PersonUser")
            {
                return GetView13();
            }

            if (extentName == "DatabaseContainer.Users")
            {
                return GetView14();
            }

            if (extentName == "DatabaseContainer.Candidates")
            {
                return GetView15();
            }

            if (extentName == "DatabaseContainer.CandidateDecision")
            {
                return GetView16();
            }

            if (extentName == "DatabaseContainer.PersonCandidate")
            {
                return GetView17();
            }

            if (extentName == "DatabaseContainer.Documents")
            {
                return GetView18();
            }

            if (extentName == "DatabaseContainer.Skills")
            {
                return GetView19();
            }

            if (extentName == "DatabaseContainer.Evaluations")
            {
                return GetView20();
            }

            if (extentName == "DatabaseContainer.CandidateEvaluation")
            {
                return GetView21();
            }

            if (extentName == "DatabaseContainer.Decisions")
            {
                return GetView22();
            }

            if (extentName == "DatabaseContainer.RecruitmentStages")
            {
                return GetView23();
            }

            if (extentName == "DatabaseContainer.SoftSkills")
            {
                return GetView24();
            }

            if (extentName == "DatabaseContainer.SoftSkillsEvaluations")
            {
                return GetView25();
            }

            if (extentName == "DatabaseContainer.SkillsEvaluations")
            {
                return GetView26();
            }

            if (extentName == "DatabaseContainer.Stage")
            {
                return GetView27();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for DatabaseStoreContainer.Persons.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Persons
        [Database.Store.Persons](T3.Persons_Id, T3.Persons_Name, T3.Persons_SurName, T3.Persons_Mail, T3.Persons_Phone, T3.Persons_Address, T3.Persons_Pesel, T3.[Persons.User_Id])
    FROM (
        SELECT T1.Persons_Id, T2.Persons_Name, T2.Persons_SurName, T2.Persons_Mail, T2.Persons_Phone, T2.Persons_Address, T2.Persons_Pesel, T1.[Persons.User_Id], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.Person).Id AS Persons_Id, 
                Key(T.User).Id AS [Persons.User_Id], 
                True AS _from1
            FROM DatabaseContainer.PersonUser AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS Persons_Id, 
                T.Name AS Persons_Name, 
                T.SurName AS Persons_SurName, 
                T.Mail AS Persons_Mail, 
                T.Phone AS Persons_Phone, 
                T.Address AS Persons_Address, 
                T.Pesel AS Persons_Pesel, 
                True AS _from0
            FROM DatabaseContainer.Persons AS T) AS T2
            ON T1.Persons_Id = T2.Persons_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DatabaseStoreContainer.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [Database.Store.Users](T1.Users_Id, T1.Users_Login, T1.Users_Password, T1.Users_Role)
    FROM (
        SELECT 
            T.Id AS Users_Id, 
            T.Login AS Users_Login, 
            T.Password AS Users_Password, 
            T.Role AS Users_Role, 
            True AS _from0
        FROM DatabaseContainer.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseStoreContainer.Candidates.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Candidates
        [Database.Store.Candidates](T3.Candidates_Id, T3.[Candidates.Decision_Id], T3.[Candidates.Person_Id])
    FROM (
        SELECT T1.Candidates_Id, T2.[Candidates.Decision_Id], T1.[Candidates.Person_Id], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.Candidate).Id AS Candidates_Id, 
                Key(T.Person).Id AS [Candidates.Person_Id], 
                True AS _from1
            FROM DatabaseContainer.PersonCandidate AS T) AS T1
            INNER JOIN (
            SELECT 
                Key(T.Candidate).Id AS Candidates_Id, 
                Key(T.Decision).Id AS [Candidates.Decision_Id], 
                True AS _from0
            FROM DatabaseContainer.CandidateDecision AS T) AS T2
            ON T1.Candidates_Id = T2.Candidates_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DatabaseStoreContainer.Documents.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Documents
        [Database.Store.Documents](T1.Documents_Id, T1.Documents_CandidateId, T1.Documents_Name, T1.Documents_Extension, T1.Documents_Type, T1.Documents_File)
    FROM (
        SELECT 
            T.Id AS Documents_Id, 
            T.CandidateId AS Documents_CandidateId, 
            T.Name AS Documents_Name, 
            T.Extension AS Documents_Extension, 
            T.Type AS Documents_Type, 
            T.File AS Documents_File, 
            True AS _from0
        FROM DatabaseContainer.Documents AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseStoreContainer.Skills.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Skills
        [Database.Store.Skills](T1.Skills_Id, T1.Skills_Name)
    FROM (
        SELECT 
            T.Id AS Skills_Id, 
            T.Name AS Skills_Name, 
            True AS _from0
        FROM DatabaseContainer.Skills AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseStoreContainer.Evaluations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Evaluations
        [Database.Store.Evaluations](T3.Evaluations_Id, T3.Evaluations_IsEvaluated, T3.[Evaluations.Candidate_Id])
    FROM (
        SELECT T1.Evaluations_Id, T1.Evaluations_IsEvaluated, T2.[Evaluations.Candidate_Id], T2._from0, T1._from1
        FROM  (
            SELECT 
                T.Id AS Evaluations_Id, 
                T.IsEvaluated AS Evaluations_IsEvaluated, 
                True AS _from1
            FROM DatabaseContainer.Evaluations AS T) AS T1
            INNER JOIN (
            SELECT 
                Key(T.Evaluation).Id AS Evaluations_Id, 
                Key(T.Candidate).Id AS [Evaluations.Candidate_Id], 
                True AS _from0
            FROM DatabaseContainer.CandidateEvaluation AS T) AS T2
            ON T1.Evaluations_Id = T2.Evaluations_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DatabaseStoreContainer.Decisions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Decisions
        [Database.Store.Decisions](T1.Decisions_Id, T1.Decisions_Type, T1.Decisions_Answer, T1.Decisions_Reason, T1.Decisions_CandidateId)
    FROM (
        SELECT 
            T.Id AS Decisions_Id, 
            T.Type AS Decisions_Type, 
            T.Answer AS Decisions_Answer, 
            T.Reason AS Decisions_Reason, 
            T.CandidateId AS Decisions_CandidateId, 
            True AS _from0
        FROM DatabaseContainer.Decisions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseStoreContainer.RecruitmentStages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RecruitmentStages
        [Database.Store.RecruitmentStages](T1.RecruitmentStages_Id, T1.RecruitmentStages_Mark, T1.RecruitmentStages_Comment, T1.RecruitmentStages_CandidateId, T1.RecruitmentStages_IsCurrent, T1.RecruitmentStages_StageId)
    FROM (
        SELECT 
            T.Id AS RecruitmentStages_Id, 
            T.Mark AS RecruitmentStages_Mark, 
            T.Comment AS RecruitmentStages_Comment, 
            T.CandidateId AS RecruitmentStages_CandidateId, 
            T.IsCurrent AS RecruitmentStages_IsCurrent, 
            T.StageId AS RecruitmentStages_StageId, 
            True AS _from0
        FROM DatabaseContainer.RecruitmentStages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseStoreContainer.SoftSkills.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SoftSkills
        [Database.Store.SoftSkills](T1.SoftSkills_Id, T1.SoftSkills_Name)
    FROM (
        SELECT 
            T.Id AS SoftSkills_Id, 
            T.Name AS SoftSkills_Name, 
            True AS _from0
        FROM DatabaseContainer.SoftSkills AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseStoreContainer.SoftSkillsEvaluations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SoftSkillsEvaluations
        [Database.Store.SoftSkillsEvaluations](T1.SoftSkillsEvaluations_Id, T1.SoftSkillsEvaluations_Mark, T1.SoftSkillsEvaluations_EvaluationId, T1.SoftSkillsEvaluations_SoftSkillId)
    FROM (
        SELECT 
            T.Id AS SoftSkillsEvaluations_Id, 
            T.Mark AS SoftSkillsEvaluations_Mark, 
            T.EvaluationId AS SoftSkillsEvaluations_EvaluationId, 
            T.SoftSkillId AS SoftSkillsEvaluations_SoftSkillId, 
            True AS _from0
        FROM DatabaseContainer.SoftSkillsEvaluations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseStoreContainer.SkillsEvaluations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SkillsEvaluations
        [Database.Store.SkillsEvaluations](T1.SkillsEvaluations_Id, T1.SkillsEvaluations_Mark, T1.SkillsEvaluations_EvaluationId, T1.SkillsEvaluations_SkillId)
    FROM (
        SELECT 
            T.Id AS SkillsEvaluations_Id, 
            T.Mark AS SkillsEvaluations_Mark, 
            T.EvaluationId AS SkillsEvaluations_EvaluationId, 
            T.SkillId AS SkillsEvaluations_SkillId, 
            True AS _from0
        FROM DatabaseContainer.SkillsEvaluations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseStoreContainer.Stage.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Stage
        [Database.Store.Stage](T1.Stage_Id, T1.Stage_Name, T1.Stage_Priority)
    FROM (
        SELECT 
            T.Id AS Stage_Id, 
            T.Name AS Stage_Name, 
            T.Priority AS Stage_Priority, 
            True AS _from0
        FROM DatabaseContainer.Stage AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.Persons.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Persons
        [Database.Person](T1.Person_Id, T1.Person_Name, T1.Person_SurName, T1.Person_Mail, T1.Person_Phone, T1.Person_Address, T1.Person_Pesel) WITH 
        RELATIONSHIP(CREATEREF(DatabaseContainer.Users, ROW(T1.PersonUser_User_Id),[Database.User]),[Database.PersonUser],Person,User) 
    FROM (
        SELECT 
            T.Id AS Person_Id, 
            T.Name AS Person_Name, 
            T.SurName AS Person_SurName, 
            T.Mail AS Person_Mail, 
            T.Phone AS Person_Phone, 
            T.Address AS Person_Address, 
            T.Pesel AS Person_Pesel, 
            True AS _from0, 
            T.User_Id AS PersonUser_User_Id
        FROM DatabaseStoreContainer.Persons AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.PersonUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PersonUser
        [Database.PersonUser](T3.PersonUser_Person, T3.PersonUser_User)
    FROM (
        SELECT -- Constructing Person
            CreateRef(DatabaseContainer.Persons, row(T2.PersonUser_Person_Id), [Database.Person]) AS PersonUser_Person, 
            T2.PersonUser_User
        FROM (
            SELECT -- Constructing User
                T1.PersonUser_Person_Id, 
                CreateRef(DatabaseContainer.Users, row(T1.PersonUser_User_Id), [Database.User]) AS PersonUser_User
            FROM (
                SELECT 
                    T.Id AS PersonUser_Person_Id, 
                    T.User_Id AS PersonUser_User_Id, 
                    True AS _from0
                FROM DatabaseStoreContainer.Persons AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [Database.User](T1.User_Id, T1.User_Login, T1.User_Password, T1.User_Role)
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.Login AS User_Login, 
            T.Password AS User_Password, 
            T.Role AS User_Role, 
            True AS _from0
        FROM DatabaseStoreContainer.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.Candidates.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Candidates
        [Database.Candidate](T1.Candidate_Id) WITH 
        RELATIONSHIP(CREATEREF(DatabaseContainer.Decisions, ROW(T1.CandidateDecision_Decision_Id),[Database.Decision]),[Database.CandidateDecision],Candidate,Decision) 
        RELATIONSHIP(CREATEREF(DatabaseContainer.Persons, ROW(T1.PersonCandidate_Person_Id),[Database.Person]),[Database.PersonCandidate],Candidate,Person) 
    FROM (
        SELECT 
            T.Id AS Candidate_Id, 
            True AS _from0, 
            T.Decision_Id AS CandidateDecision_Decision_Id, 
            T.Person_Id AS PersonCandidate_Person_Id
        FROM DatabaseStoreContainer.Candidates AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.CandidateDecision.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CandidateDecision
        [Database.CandidateDecision](T3.CandidateDecision_Candidate, T3.CandidateDecision_Decision)
    FROM (
        SELECT -- Constructing Candidate
            CreateRef(DatabaseContainer.Candidates, row(T2.CandidateDecision_Candidate_Id), [Database.Candidate]) AS CandidateDecision_Candidate, 
            T2.CandidateDecision_Decision
        FROM (
            SELECT -- Constructing Decision
                T1.CandidateDecision_Candidate_Id, 
                CreateRef(DatabaseContainer.Decisions, row(T1.CandidateDecision_Decision_Id), [Database.Decision]) AS CandidateDecision_Decision
            FROM (
                SELECT 
                    T.Id AS CandidateDecision_Candidate_Id, 
                    T.Decision_Id AS CandidateDecision_Decision_Id, 
                    True AS _from0
                FROM DatabaseStoreContainer.Candidates AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.PersonCandidate.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PersonCandidate
        [Database.PersonCandidate](T3.PersonCandidate_Person, T3.PersonCandidate_Candidate)
    FROM (
        SELECT -- Constructing Person
            CreateRef(DatabaseContainer.Persons, row(T2.PersonCandidate_Person_Id), [Database.Person]) AS PersonCandidate_Person, 
            T2.PersonCandidate_Candidate
        FROM (
            SELECT -- Constructing Candidate
                T1.PersonCandidate_Person_Id, 
                CreateRef(DatabaseContainer.Candidates, row(T1.PersonCandidate_Candidate_Id), [Database.Candidate]) AS PersonCandidate_Candidate
            FROM (
                SELECT 
                    T.Person_Id AS PersonCandidate_Person_Id, 
                    T.Id AS PersonCandidate_Candidate_Id, 
                    True AS _from0
                FROM DatabaseStoreContainer.Candidates AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.Documents.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Documents
        [Database.Document](T1.Document_Id, T1.Document_CandidateId, T1.Document_Name, T1.Document_Extension, T1.Document_Type, T1.Document_File)
    FROM (
        SELECT 
            T.Id AS Document_Id, 
            T.CandidateId AS Document_CandidateId, 
            T.Name AS Document_Name, 
            T.Extension AS Document_Extension, 
            T.Type AS Document_Type, 
            T.File AS Document_File, 
            True AS _from0
        FROM DatabaseStoreContainer.Documents AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.Skills.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Skills
        [Database.Skill](T1.Skill_Id, T1.Skill_Name)
    FROM (
        SELECT 
            T.Id AS Skill_Id, 
            T.Name AS Skill_Name, 
            True AS _from0
        FROM DatabaseStoreContainer.Skills AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.Evaluations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Evaluations
        [Database.Evaluation](T1.Evaluation_Id, T1.Evaluation_IsEvaluated) WITH 
        RELATIONSHIP(CREATEREF(DatabaseContainer.Candidates, ROW(T1.CandidateEvaluation_Candidate_Id),[Database.Candidate]),[Database.CandidateEvaluation],Evaluation,Candidate) 
    FROM (
        SELECT 
            T.Id AS Evaluation_Id, 
            T.IsEvaluated AS Evaluation_IsEvaluated, 
            True AS _from0, 
            T.Candidate_Id AS CandidateEvaluation_Candidate_Id
        FROM DatabaseStoreContainer.Evaluations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.CandidateEvaluation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CandidateEvaluation
        [Database.CandidateEvaluation](T3.CandidateEvaluation_Candidate, T3.CandidateEvaluation_Evaluation)
    FROM (
        SELECT -- Constructing Candidate
            CreateRef(DatabaseContainer.Candidates, row(T2.CandidateEvaluation_Candidate_Id), [Database.Candidate]) AS CandidateEvaluation_Candidate, 
            T2.CandidateEvaluation_Evaluation
        FROM (
            SELECT -- Constructing Evaluation
                T1.CandidateEvaluation_Candidate_Id, 
                CreateRef(DatabaseContainer.Evaluations, row(T1.CandidateEvaluation_Evaluation_Id), [Database.Evaluation]) AS CandidateEvaluation_Evaluation
            FROM (
                SELECT 
                    T.Candidate_Id AS CandidateEvaluation_Candidate_Id, 
                    T.Id AS CandidateEvaluation_Evaluation_Id, 
                    True AS _from0
                FROM DatabaseStoreContainer.Evaluations AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.Decisions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Decisions
        [Database.Decision](T1.Decision_Id, T1.Decision_Type, T1.Decision_Answer, T1.Decision_Reason, T1.Decision_CandidateId)
    FROM (
        SELECT 
            T.Id AS Decision_Id, 
            T.Type AS Decision_Type, 
            T.Answer AS Decision_Answer, 
            T.Reason AS Decision_Reason, 
            T.CandidateId AS Decision_CandidateId, 
            True AS _from0
        FROM DatabaseStoreContainer.Decisions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.RecruitmentStages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RecruitmentStages
        [Database.RecruitmentStage](T1.RecruitmentStage_Id, T1.RecruitmentStage_Mark, T1.RecruitmentStage_Comment, T1.RecruitmentStage_CandidateId, T1.RecruitmentStage_IsCurrent, T1.RecruitmentStage_StageId)
    FROM (
        SELECT 
            T.Id AS RecruitmentStage_Id, 
            T.Mark AS RecruitmentStage_Mark, 
            T.Comment AS RecruitmentStage_Comment, 
            T.CandidateId AS RecruitmentStage_CandidateId, 
            T.IsCurrent AS RecruitmentStage_IsCurrent, 
            T.StageId AS RecruitmentStage_StageId, 
            True AS _from0
        FROM DatabaseStoreContainer.RecruitmentStages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.SoftSkills.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SoftSkills
        [Database.SoftSkill](T1.SoftSkill_Id, T1.SoftSkill_Name)
    FROM (
        SELECT 
            T.Id AS SoftSkill_Id, 
            T.Name AS SoftSkill_Name, 
            True AS _from0
        FROM DatabaseStoreContainer.SoftSkills AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.SoftSkillsEvaluations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SoftSkillsEvaluations
        [Database.SoftSkillsEvaluation](T1.SoftSkillsEvaluation_Id, T1.SoftSkillsEvaluation_Mark, T1.SoftSkillsEvaluation_EvaluationId, T1.SoftSkillsEvaluation_SoftSkillId)
    FROM (
        SELECT 
            T.Id AS SoftSkillsEvaluation_Id, 
            T.Mark AS SoftSkillsEvaluation_Mark, 
            T.EvaluationId AS SoftSkillsEvaluation_EvaluationId, 
            T.SoftSkillId AS SoftSkillsEvaluation_SoftSkillId, 
            True AS _from0
        FROM DatabaseStoreContainer.SoftSkillsEvaluations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.SkillsEvaluations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SkillsEvaluations
        [Database.SkillsEvaluation](T1.SkillsEvaluation_Id, T1.SkillsEvaluation_Mark, T1.SkillsEvaluation_EvaluationId, T1.SkillsEvaluation_SkillId)
    FROM (
        SELECT 
            T.Id AS SkillsEvaluation_Id, 
            T.Mark AS SkillsEvaluation_Mark, 
            T.EvaluationId AS SkillsEvaluation_EvaluationId, 
            T.SkillId AS SkillsEvaluation_SkillId, 
            True AS _from0
        FROM DatabaseStoreContainer.SkillsEvaluations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DatabaseContainer.Stage.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Stage
        [Database.Stage](T1.Stage_Id, T1.Stage_Name, T1.Stage_Priority)
    FROM (
        SELECT 
            T.Id AS Stage_Id, 
            T.Name AS Stage_Name, 
            T.Priority AS Stage_Priority, 
            True AS _from0
        FROM DatabaseStoreContainer.Stage AS T
    ) AS T1");
        }
    }
}
